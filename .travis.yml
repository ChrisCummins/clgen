# build environment
#
# We need the extra RAM that a non-container build gives us.
#
# See: https://docs.travis-ci.com/user/ci-environment/
sudo: required
dist: trusty

language: python

python:
  - "3.6"

cache:
  directories:
    - .cache
    - native/cmake
    - native/gpuverify
    - native/libclc
    - native/llvm
    - native/ninja
    - native/oclgrind

# here we do the work that install-deps.sh script does
addons:
  apt:
    sources:
      - llvm-toolchain-precise-3.7
      - ubuntu-toolchain-r-test
    packages:
      - binutils-dev  # possible fix for segfault. See: https://github.com/SimonKagstrom/kcov/issues/105
      - gcc-5
      - g++-5
      - clang-3.6
      - libhdf5-serial-dev
      - python-dev
      - mono-complete

env:
  global:
    - CC=clang
    - CXX=clang++

before_install:
  - pip install --upgrade pip
  - pip install coveralls
  - sudo apt-get update -qq
  - ldd --version   # glibc version
  - $CC --version   # c compiler
  - $CXX --version  # c++ compiler

# A clean Travis CI build will timeout after 50 minutes and fail. Irritatingly,
# this means that the caches are not updated, so we can't incrementally build
# the project by restarting the job. The workaround is to kill the build after
# a time limit and then restart the job by hand:
#
# install:  # cache cold (runs build in 30min chunks, restart job until complete)
#   - ./configure -b
#   - timeout 1800 make all || true
#   - touch NORUN
#
install:  # cache hot
  - ./configure -b
  - make all
  - make install
  - pip freeze  # python package versions

script:
  - test -f NORUN || clgen-test -v

after_success:
  - export COERAGE_REPORT="$(clgen-test --coverage-path)" && echo "$COVERAGE_REPORT"
  - export COERAGERC="$(clgen-test --coveragerc-path)" && echo "$COVERAGERC"
  - test -f NORUN || coveralls --data_file "$COVERAGE_REPORT" --config_file "$COVERAGERC"

notifications:
  email:
    on_success: always # [always|never|change]
    on_failure: always # [always|never|change]
