#!/usr/bin/env python3
#
# Copyright 2016, 2017 Chris Cummins <chrisc.101@gmail.com>.
#
# This file is part of CLgen.
#
# CLgen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CLgen is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CLgen.  If not, see <http://www.gnu.org/licenses/>.
#
import json
import os
import sys

from argparse import ArgumentParser


def yes_no(question, default="no"):
    """Ask a yes/no question and return user's answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        if sys.version_info >= (3, 0):
            choice = input().lower()
        else:
            choice = raw_input().lower()

        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")


def to_make(val):
    return str(int(val))


def to_python(val):
    return "True" if val else "False"


def to_text(val):
    return "yes" if val else "no"


def main():
    parser = ArgumentParser(description="Configure CLgen build.")
    parser.add_argument("-r", "--reconfigure", action="store_true",
                        help="re-run configuraiton using previous settings")
    parser.add_argument("-b", "--batch", action="store_true",
                        help="defaults all options to 'no'. Override with:")
    parser.add_argument("--with-opencl", action="store_true")
    parser.add_argument("--with-cuda", action="store_true")
    parser.add_argument("--with-dev-tools", action="store_true")
    args = parser.parse_args()

    if args.reconfigure:
        args.batch = True
        try:
            with open(".config.json") as infile:
                cfg = json.loads(infile.read())
        except FileNotFoundError:
            print("you must run ./configure first", file=sys.stderr)
            sys.exit(1)
    else:
        cfg = {
            "opencl": args.with_opencl,
            "cuda": args.with_cuda,
            "version": "0.2.17",
        }

    # get input from user
    if not args.batch:
        if not cfg["opencl"]:
            cfg["opencl"] = yes_no("Enable OpenCL support?")

        if not cfg["cuda"]:
            cfg["cuda"] = yes_no("Enable CUDA support?")

    # generate JSON config file
    with open(".config.json", "w") as outfile:
        json.dump(cfg, outfile)

    # generate make config file
    with open(".config.make", "w") as outfile:
        print("USE_OPENCL := " + to_make(cfg["opencl"]), file=outfile)
        print("USE_CUDA := " + to_make(cfg["cuda"]), file=outfile)
        print("CLGEN_VERSION := " + cfg["version"], file=outfile)

    # generate python config file
    with open(os.path.join("clgen", "config.py"), "w") as outfile:
        print("USE_OPENCL = " + to_python(cfg["opencl"]), file=outfile)
        print("USE_CUDA = " + to_python(cfg["cuda"]), file=outfile)
        print("VERSION = '{}'".format(cfg["version"]), file=outfile)

    # generate python requirements file
    requirements_files = ['requirements.txt']
    if cfg["opencl"]:
        requirements_files += ['requirements.opencl.txt']
    if cfg["cuda"]:
        requirements_files += ['requirements.cuda.txt']

    # if configured with CUDA, require GPU-enabled tensorflow:
    if cfg["cuda"]:
        requirements_files += ['requirements.tensorflow.gpu.txt']
    else:
        requirements_files += ['requirements.tensorflow.cpu.txt']

    with open("requirements.txt", "w") as outfile:
        for name in requirements_files:
            with open(os.path.join("make", "requirements", name)) as infile:
                outfile.write(infile.read())

    print("CLgen {version} configured:".format(version=cfg["version"]))
    print()
    print("    OpenCL support:  " + to_text(cfg["opencl"]))
    print("    CUDA support:    " + to_text(cfg["cuda"]))
    print()
    print("You may now build CLgen by running 'make'.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\naborting without writing changes", file=sys.stderr)
        sys.exit(1)
