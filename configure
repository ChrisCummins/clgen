#!/usr/bin/env python3
#
# Copyright 2016, 2017 Chris Cummins <chrisc.101@gmail.com>.
#
# This file is part of DeepSmith.
#
# DeepSmith is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# DeepSmith is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# DeepSmith.  If not, see <http://www.gnu.org/licenses/>.
#
import json
import os
import subprocess
import sys

from argparse import ArgumentParser
from configparser import ConfigParser


def yes_no(batch, question, default="no"):
    """Ask a yes/no question and return user's answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True, True: True,
             "no": False, "n": False, False: False}

    if batch:
        return valid[default]

    if default is None:
        prompt = " [y/n] "
    elif default:
        prompt = " [Y/n] "
    else:
        prompt = " [y/N] "

    while True:
        sys.stdout.write(question + prompt)
        if sys.version_info >= (3, 0):
            choice = input().lower()
        else:
            choice = raw_input().lower()

        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")


def textinput(batch, question, default=None):
    """Ask a question and return user's answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
    """
    if batch:
        return default

    if default is None:
        prompt = " "
        default = ""
    else:
        prompt = " [default: {default}] ".format(**vars())

    sys.stdout.write(question + prompt)
    if sys.version_info >= (3, 0):
        choice = input()
    else:
        choice = raw_input()

    if default is not None and choice == '':
        return default
    else:
        return choice


def to_make(val):
    return str(int(val))


def to_python(val):
    return "True" if val else "False"


def to_text(val):
    return "yes" if val else "no"


default_rc = "~/.dsmithrc"


def _abspath(path: str) -> str:
    return os.path.abspath(os.path.expanduser(path))


def main():
    parser = ArgumentParser(description="Configure DeepSmith build.")
    parser.add_argument("-r", "--reconfigure", action="store_true",
                        help="re-run configuraiton using previous settings")
    parser.add_argument("-b", "--batch", action="store_true",
                        help="defaults all options to defaults. Override with:")
    parser.add_argument("--with-cuda-backend", action="store_true",
                        help="build with CUDA support")
    parser.add_argument("--with-opencl", action="store_true",
                        help="enable OpenCL fuzzing")
    parser.add_argument("--with-llvm-trunk", action="store_true",
                        help="build with LLVM trunk testbed")
    parser.add_argument("--with-llvm-5.0", action="store_true", dest="with_llvm_50",
                        help="build with LLVM 5.0 testbed")
    parser.add_argument("--with-llvm-4.0", action="store_true", dest="with_llvm_40",
                        help="build with LLVM 4.0 testbed")
    parser.add_argument("--with-llvm-3.9", action="store_true", dest="with_llvm_39",
                        help="build with LLVM 3.9 testbed")
    parser.add_argument("--with-llvm-3.8", action="store_true", dest="with_llvm_38",
                        help="build with LLVM 3.8 testbed")
    parser.add_argument("--with-llvm-3.7", action="store_true", dest="with_llvm_37",
                        help="build with LLVM 3.7 testbed")
    parser.add_argument("--with-llvm-3.6", action="store_true", dest="with_llvm_36",
                        help="build with LLVM 3.6 testbed")
    parser.add_argument("--with-solidity", action="store_true",
                        help="enable Solidity fuzzing")
    parser.add_argument("--with-glsl", action="store_true",
                        help="enable GLSL fuzzing")
    parser.add_argument("--rc", metavar="<path>", default=None,
                        help="path to configuration file (default: " + default_rc + ")")
    args = parser.parse_args()

    # Directory containing this respository
    pwd = os.path.dirname(os.path.realpath(__file__))

    batch = args.batch
    if args.reconfigure:
        batch = True
        try:
            with open(".config.json") as infile:
                cfg = json.loads(infile.read())
        except FileNotFoundError:
            print("You must run ./configure first before you can use "
                  "the `-r` flag.", file=sys.stderr)
            sys.exit(1)
    else:
        cfg = {
            "cuda": args.with_cuda_backend,
            "opencl": args.with_opencl,
            "version": "0.4.0.dev0",
            "dsmith_dir": pwd,
            "llvm_trunk": args.with_llvm_trunk,
            "llvm_50": args.with_llvm_50,
            "llvm_40": args.with_llvm_40,
            "llvm_39": args.with_llvm_39,
            "llvm_38": args.with_llvm_38,
            "llvm_37": args.with_llvm_37,
            "llvm_36": args.with_llvm_36,
            "solidity": args.with_solidity,
            "glsl": args.with_glsl,
            "rc": default_rc,
        }

    cfg["cuda"] = yes_no(batch, "Enable CUDA backend? (requires CUDA)", default=cfg["cuda"])

    # OpenCL settings:
    cfg["opencl"] = yes_no(batch, "Enable OpenCL fuzzing? (requires OpenCL)", default=cfg["opencl"])
    if cfg["opencl"]:
        if yes_no(batch, "Build all OpenCL LLVM testbeds?", default=(
            cfg["llvm_trunk"] and
            cfg["llvm_50"] and
            cfg["llvm_40"] and
            cfg["llvm_39"] and
            cfg["llvm_38"] and
            cfg["llvm_37"] and
            cfg["llvm_36"])):
            cfg["llvm_trunk"] = True
            cfg["llvm_50"] = True
            cfg["llvm_40"] = True
            cfg["llvm_39"] = True
            cfg["llvm_38"] = True
            cfg["llvm_37"] = True
            cfg["llvm_36"] = True
        else:
            cfg["llvm_trunk"] = yes_no(batch, "Build OpenCL LLMV trunk testbed?", default=args.with_llvm_trunk)
            cfg["llvm_50"] = yes_no(batch, "Build OpenCL LLMV 5.0 testbed?", default=args.with_llvm_50)
            cfg["llvm_40"] = yes_no(batch, "Build OpenCL LLMV 4.0 testbed?", default=args.with_llvm_40)
            cfg["llvm_39"] = yes_no(batch, "Build OpenCL LLMV 3.9 testbed?", default=args.with_llvm_39)
            cfg["llvm_38"] = yes_no(batch, "Build OpenCL LLMV 3.8 testbed?", default=args.with_llvm_38)
            cfg["llvm_37"] = yes_no(batch, "Build OpenCL LLMV 3.7 testbed?", default=args.with_llvm_37)
            cfg["llvm_36"] = yes_no(batch, "Build OpenCL LLMV 3.6 testbed?", default=args.with_llvm_36)
    else:
        cfg["llvm_trunk"] = False
        cfg["llvm_50"] = False
        cfg["llvm_40"] = False
        cfg["llvm_39"] = False
        cfg["llvm_38"] = False
        cfg["llvm_37"] = False
        cfg["llvm_36"] = False

    # Solidity settings:
    cfg["solidity"] = yes_no(batch, "Enable Solidity fuzzing? (requires solc)", default=cfg["solidity"])

    # GLSL settings
    cfg["glsl"] = yes_no(batch, "Enable GLSL fuzzing?", default=cfg["glsl"])

    cfg["rc_path"] = textinput(batch, "Path to configuration file", default=cfg["rc"])

    # generate JSON config file
    with open(".config.json", "w") as outfile:
        json.dump(cfg, outfile, sort_keys=True,
                  indent=4, separators=(',', ': '))
        print(file=outfile)

    # generate make config file
    with open(".config.make", "w") as outfile:
        print("ROOT := " + str(cfg['dsmith_dir']), file=outfile)
        print("RC_PATH := {}".format(cfg["rc_path"]), file=outfile)
        print("DSMITH_VERSION := " + cfg["version"], file=outfile)
        print("USE_CUDA := " + to_make(cfg["cuda"]), file=outfile)
        print("WITH_OPENCL := " + to_make(cfg["opencl"]), file=outfile)
        print("WITH_SOLIDITY := " + to_make(cfg["solidity"]), file=outfile)
        print("WITH_GLSL := " + to_make(cfg["glsl"]), file=outfile)
        for llvm in ["trunk", "50", "40", "39", "38", "37", "36"]:
            key = llvm.upper()
            print("WITH_LLVM_{key} := ".format(**vars()) + to_make(cfg.get("llvm_{llvm}".format(**vars()), False)), file=outfile)


    # generate python config file
    with open(os.path.join("dsmith", "_config.py"), "w") as outfile:
        print("ROOT = '" + cfg['dsmith_dir'] + "'", file=outfile)
        print("RC_PATH = '{}'".format(cfg["rc_path"]), file=outfile)
        print("VERSION = '{}'".format(cfg["version"]), file=outfile)
        print("USE_CUDA = " + to_python(cfg["cuda"]), file=outfile)
        print("WITH_OPENCL = " + to_python(cfg["opencl"]), file=outfile)
        print("WITH_SOLIDITY = " + to_python(cfg["solidity"]), file=outfile)
        print("WITH_GLSL = " + to_python(cfg["glsl"]), file=outfile)

    # generate python requirements file
    requirements_files = ['requirements.txt']

    # if configured with CUDA, require GPU-enabled tensorflow:
    if cfg["cuda"]:
        requirements_files += ['requirements.tensorflow.gpu.txt']
    else:
        requirements_files += ['requirements.tensorflow.cpu.txt']

    if cfg["opencl"]:
        requirements_files += ['requirements.opencl.txt']

    cfg["rc_path"] = _abspath(cfg["rc_path"])
    if os.path.exists(cfg["rc_path"]):
        # Test that configuration file is parsable
        try:
            config = ConfigParser()
            config.read(cfg["rc_path"])
        except:
            print("""\
Oops! We tried to parse the file and failed. Please see the documentation
for instructions on how to set it up:
<https://github.com/ChrisCummins/dsmith>.""".format(**vars()),
                  file=sys.stderr)
            sys.exit(1)
    else:
        # Prompt user for config values
        print("""\
It looks like that file does not exist.
The following questions will create it for you:""")
        config = ConfigParser()

        engine = textinput(batch, "Select database engine: {sqlite,mysql}", default="mysql")
        if engine == "sqlite":
            config['database'] = {
                "engine": "sqlite",
                "dir": _abspath(textinput(batch, "Directory for database files",
                                          default="~/.cache/dsmith/db")),
                "buffer_size": 250,
            }
        elif engine == "mysql":
            config['database'] = {
                "engine": "mysql",
                "schema": "dsmith_04_opencl",
                "buffer_size": 250,
                "hostname": textinput(batch, "Hostname of database Server", default="localhost"),
                "port": int(textinput(batch, "Database server port", default="3306")),
                "username": textinput(batch, "Database username:"),
                "password": textinput(batch, "Database password:"),
            }
        else:
            print("💩  I'm sorry, that is not a valid database engine",
                  file=sys.stderr)
            sys.exit(1)

        with open(cfg["rc_path"], 'w') as outfile:
            config.write(outfile)


    with open("requirements.txt", "w") as outfile:
        for name in requirements_files:
            with open(os.path.join("build", "requirements", name)) as infile:
                outfile.write(infile.read())

    try:
        # Recursive checkout all git submodules:
        subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
        # Install any required system-wide dependencies:
        # TODO: Pipe output into bash shell:
        subprocess.check_call(['bash', os.path.join('build', 'install-deps.sh')])
    except subprocess.CalledProcessError:
        print("💩  Something went wrong.", file=sys.stderr)
        sys.exit(1)

    llvms = ["trunk", "50", "40", "39", "38", "37", "36"]
    llvms = [v for v in llvms if cfg["llvm_{v}".format(**vars())]] or ["none"]

    print("DeepSmith {version} configured:".format(version=cfg["version"]))
    print()
    print("    Root path:            " + cfg["dsmith_dir"])
    print("    CUDA backend:         " + to_text(cfg["cuda"]))
    print("    OpenCL support:       " + to_text(cfg["opencl"]))
    print("    LLVM OpenCL testbeds: " + ", ".join(llvms))
    print("    Solidity support:     " + to_text(cfg["solidity"]))
    print("    Configuration path:   " + cfg["rc_path"])
    print()
    print("You may now build DeepSmith by running 'make'.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\naborting without writing changes", file=sys.stderr)
        sys.exit(1)
